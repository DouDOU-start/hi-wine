{"version":3,"file":"api.js","sources":["utils/api.js"],"sourcesContent":["// api.js - API请求工具类\r\nimport { BASE_URL } from '@/config.js';\r\n\r\n// 获取存储的token\r\nconst getToken = () => {\r\n  return uni.getStorageSync('token') || '';\r\n};\r\n\r\n// 请求封装\r\nconst request = (url, method, data, needAuth = true) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: BASE_URL + url,\r\n      method,\r\n      data,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': needAuth ? `Bearer ${getToken()}` : ''\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          // 服务器正常响应\r\n          console.log(`API响应(${url}):`, JSON.stringify(res.data));\r\n          \r\n          // 检查响应格式，兼容不同格式\r\n          if (res.data.hasOwnProperty('code')) {\r\n            // 新格式: { code: 0, message: '成功', data: {...} }\r\n            if (res.data.code === 0) {\r\n              resolve(res.data);\r\n            } else {\r\n              uni.showToast({\r\n                title: res.data.message || '请求失败',\r\n                icon: 'none'\r\n              });\r\n              reject(new Error(res.data.message || '请求失败'));\r\n            }\r\n          } else {\r\n            // 旧格式: 直接返回数据\r\n            resolve({ code: 0, message: '操作成功', data: res.data });\r\n          }\r\n        } else if (res.statusCode === 401) {\r\n          // token失效，跳转到登录页\r\n          uni.showToast({\r\n            title: '请先登录',\r\n            icon: 'none'\r\n          });\r\n          // 清除token\r\n          uni.removeStorageSync('token');\r\n          // 跳转到个人中心页面\r\n          setTimeout(() => {\r\n            uni.switchTab({\r\n              url: '/pages/profile/index'\r\n            });\r\n          }, 1500);\r\n          reject(new Error('未登录或登录已过期'));\r\n        } else {\r\n          uni.showToast({\r\n            title: res.data.message || '请求失败',\r\n            icon: 'none'\r\n          });\r\n          reject(new Error(res.data.message || '请求失败'));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        uni.showToast({\r\n          title: '网络错误',\r\n          icon: 'none'\r\n        });\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// API方法\r\nexport default {\r\n  // 用户登录\r\n  login(code) {\r\n    // 按照微信官方API参数格式发送请求\r\n    return request('/wechat/login', 'POST', { \r\n      code: code  // 临时登录凭证\r\n    }, false);\r\n  },\r\n  \r\n  // 更新用户信息\r\n  updateUserInfo(nickname, avatar) {\r\n    return request('/api/user/update', 'POST', {\r\n      nickname: nickname,\r\n      avatar: avatar\r\n    }, true);\r\n  },\r\n  \r\n  // 获取商品分类列表\r\n  getCategoryList() {\r\n    return request('/api/category/list', 'GET');\r\n  },\r\n  \r\n  // 获取商品列表\r\n  getProductList(categoryId = 0, keyword = '', page = 1, size = 10) {\r\n    return request('/api/product/list', 'GET', { categoryId, keyword, page, size });\r\n  },\r\n  \r\n  // 获取商品详情\r\n  getProductDetail(id) {\r\n    return request('/api/product/detail', 'GET', { id });\r\n  },\r\n  \r\n  // 创建订单\r\n  createOrder(tableId, items) {\r\n    return request('/api/order/create', 'POST', { tableId, items });\r\n  },\r\n  \r\n  // 获取订单列表\r\n  getOrderList(status = -1, page = 1, size = 10) {\r\n    return request('/api/order/list', 'GET', { status, page, size });\r\n  },\r\n  \r\n  // 获取订单详情\r\n  getOrderDetail(id) {\r\n    return request('/api/order/detail', 'GET', { id });\r\n  },\r\n  \r\n  // 更新订单状态\r\n  updateOrderStatus(id, status) {\r\n    return request('/api/order/updateStatus', 'POST', { id, status });\r\n  }\r\n}; "],"names":["uni","BASE_URL"],"mappings":"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"}